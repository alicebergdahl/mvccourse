{% extends 'base.html.twig' %}

{% block title %}Mätningar och Analys av Kodkvalitet{% endblock %}

{% block body %}

<div class="content">
    <div class="row">
        <h1>Mätningar och Analys av Kodkvalitet</h1>
    </div>
    <div class="row">
        <div class="column">
            <h2>Introduktion</h2>
            <p>
                För att förstå vad som gör min kod bra, måste vi titta på flera faktorer. De sex C:na för kodkvalitet är:
            </p>
            <ul>
                <li><strong>Codestyle (Kodstil):</strong> Handlar om hur koden skrivs och om den följer etablerade kodningsstandarder och konventioner.</li>
                <li><strong>Coverage (Täckning):</strong> Mäter i vilken utsträckning koden täcks av automatiserade tester.</li>
                <li><strong>Complexity (Komplexitet):</strong> Mäter hur komplicerad koden är. Låg komplexitet gör koden enklare att förstå och underhålla.</li>
                <li><strong>Cohesion (Sammanhållning):</strong> Avser hur väl relaterade och fokuserade ansvarsområdena för en modul eller klass är.</li>
                <li><strong>Coupling (Koppling):</strong> Mäter graden av beroende mellan olika delar av koden. Låg koppling är önskvärt för att minska risken för oväntade bieffekter.</li>
                <li><strong>CRAP (Ändringsrisk och Antimönster):</strong> Identifierar delar av koden som är riskabla att ändra och innehåller eventuella antimönster som bör undvikas.</li>
            </ul>
            <p>
                Genom att analysera dessa aspekter av min kod kan jag förbättra dess övergripande kvalitet och öka dess underhållbarhet över tid.
            </p>

            <h2>Phpmetrics Analys</h2>
            <img src="{{ asset('img/phpmetrics.png') }}" width="500" />
            <p>
                Efter att ha analyserat Phpmetrics-rapporten för min kod har jag identifierat flera områden som kan förbättras:
            </p>
            <ol>
                <li>
                    <strong>App\Controller\ProductController:</strong> Phpmetrics indikerar att det finns ett potentiellt problem med blob- eller gudobjektsmönstret i denna controller. Den har många offentliga metoder och brist på sammanhållning (LCOM=4), vilket kan leda till underhållsproblem och svårigheter att förstå koden. Att överväga att bryta ner denna klass i mindre, mer sammanhängande enheter kan vara fördelaktigt. Dessutom har den en relativ systemkomplexitet på 200, vilket indikerar en hög grad av komplexitet och därmed en utmaning för underhåll och förståelse, en aspekt relaterad till "Complexity".
                </li>
                <p>
                    <img src="{{ asset('img/phpmetrics1.png') }}" width="500" />
                </p>
                <li>
                    <strong>App\Controller\GameController:</strong> Phpmetrics varnar för att det troligen finns buggar i denna controller. Det är viktigt att noggrant granska och åtgärda dessa buggar för att förbättra kodens tillförlitlighet och funktionalitet. Dessutom har den en hög komplexitet och 17 klassviolationer enligt Phpmetrics. Att identifiera och åtgärda dessa överträdelser kan förbättra kodens läsbarhet och underhållbarhet över tid, vilket relaterar till "Complexity" och "Codestyle". Dessutom har den en relativ systemkomplexitet på 250, en annan indikator på komplexitet.
                </li>
                <p>
                    <img src="{{ asset('img/phpmetrics2.png') }}" width="500" />
                </p>
                <li>
                    <strong>App\Controller\LibraryController:</strong> Phpmetrics rapporterar att koden har en hög komplexitet (Relative System Complexity = 361.48), vilket kan göra den svår att förstå och underhålla. Det är viktigt att överväga att förenkla och strukturera om koden för att minska dess komplexitet och öka dess läsbarhet, en aspekt som berör "Complexity". Dessutom har den en kopplingsgrad på 0.8, vilket indikerar en hög beroendegrad mellan olika delar av koden och kan leda till oväntade bieffekter och svårigheter att ändra koden, en koppling till "Coupling".
                </li>
                <p>
                    <img src="{{ asset('img/phpmetrics3.png') }}" width="500" />
                </p>
            </ol>

            <h2>Scrutinizer Analys</h2>
                <a href="https://scrutinizer-ci.com/g/alicebergdahl/mvccourse/?branch=main">
                    <img src="https://scrutinizer-ci.com/g/alicebergdahl/mvccourse/badges/quality-score.png?b=main" alt="Scrutinizer Code Quality"/>
                </a>
                <a href="https://scrutinizer-ci.com/g/alicebergdahl/mvccourse/?branch=main">
                    <img src="https://scrutinizer-ci.com/g/alicebergdahl/mvccourse/badges/coverage.png?b=main" alt="Code Coverage"/>
                </a>
                <a href="https://scrutinizer-ci.com/g/alicebergdahl/mvccourse/build-status/main">
                    <img src="https://scrutinizer-ci.com/g/alicebergdahl/mvccourse/badges/build.png?b=main" alt="Build Status"/>
                </a>
            </p>
            <img src="{{ asset('img/scruti1.png') }}" width="500" />
            <p>
                Efter att ha granskat Scrutinizer-rapporten för min kod, ser jag att det finns allvarliga problem med kodtäckningen för controllers, repositories och form-klasser då jag glömde att skriva tester för kursmoment 5. Dålig testtäckning inom dessa områden är oroande eftersom det ökar risken för oidentifierade fel och buggar i produktion, vilket påverkar "Coverage". Jag behöver åtgärda detta genom att skriva fler tester som täcker alla väsentliga delar av koden.
            </p>
            <ol>
                <li><strong>Controllers:</strong> Dålig kodtäckning för controllers innebär att vi inte testar tillräckligt många scenarier och flöden i vår applikation. Detta kan leda till att vi missar viktiga buggar och fel i vår affärslogik. Scrutinizer visar att kodtäckningen är endast 61% för controllers, vilket indikerar en brist på "Coverage". En låg kodtäckning ökar risken för missade fel och buggar och kan leda till kvalitetsproblem.
                </li>
                <li><strong>Repositories:</strong> Liksom controllers hanterar repositories viktiga delar av datainteraktionen i vår applikation. Dålig testtäckning här innebär en högre risk för felaktiga databasåtgärder och felaktig datahantering. Scrutinizer visar att kodtäckningen är endast 0% för repositories, vilket indikerar en brist på "Coverage". En låg kodtäckning ökar risken för fel i datahanteringen och kan påverka systemets tillförlitlighet.
                </li>
                <li><strong>Form-klasser:</strong> Form-klasser är ansvariga för att validera och bearbeta användardata. Om vi inte testar dessa tillräckligt kan det leda till att felaktiga eller ogiltiga data accepteras av applikationen, vilket kan äventyra säkerheten och integriteten för vår användarinformation. Scrutinizer visar att kodtäckningen är endast 0% för form-klasser, vilket indikerar en brist på "Coverage". En låg kodtäckning ökar risken för säkerhetsproblem och dataintegritetsproblem.
                </li>
            </ol>
            <img src="{{ asset('img/scruti2.png') }}" width="500" />
            
            <h2>Förbättringar</h2>
            <p>
                För att förbättra kodkvaliteten och öka underhållbarheten över tid planerar jag att genomföra följande förbättringar:
            </p>
            <ol>
                <li>
                    <strong>Bättre kodtäckning:</strong> Jag kommer att skriva fler tester för att öka kodtäckningen, särskilt för controllers, repositories och form-klasser. Detta kommer att minska risken för oidentifierade fel och buggar i produktion och förbättra "Coverage"-mätvärdet i Scrutinizer.
                </li>
                <li>
                    <strong>Minskad komplexitet:</strong> Jag planerar att refaktorisera kod som har hög komplexitet enligt Phpmetrics-rapporten, särskilt i ProductController. Genom att minska komplexiteten kommer koden att bli lättare att förstå och underhålla, vilket påverkar "Complexity"-mätvärdet.
                </li>
                <li>
                    <strong>Färre violations:</strong> Jag kommer att fokusera på att sänka antalet violations enligt phpmetrics. Just nu har jag 4 stycken violations och målet är att få ner det till 0. Jag kommer kolla på alla violations enskilt för att se hur jag kan åtgärda problemen.
                </li>
            </ol>

            <h2>Lösningar till problemen</h2>
                <p>För att lösa problem 1, där jag upptäckte en låg kodtäckning, skrev jag nya enhetstester för flera viktiga komponenter i min applikation. Det inkluderade enhetstester för controllers, entiteten Book.php, formuläret BookType.php samt Repository/BookRepository.php. Genom att göra detta kunde jag öka min kodtäckning från 58% till 77%. Nedan visas bilder som illustrerar hur kodtäckningen förbättrades efter att nya enhetstester skrevs.</p>
                <img src="{{ asset('img/problem1b.png') }}" alt="Kodtäckning före förbättringarna för problem 1" width="300" />
                <img src="{{ asset('img/problem1a.png') }}" alt="Kodtäckning efter förbättringarna för problem 1" width="300" />

                <p>För att lösa problem 2, där jag identifierade hög komplexitet och behovet av att reducera det, gjorde jag flera ändringar. Jag tog bort ProductController eftersom den inte längre behövdes, vilket minskade onödig komplexitet. Dessutom delade jag upp min GameController i två separata controllers: GameController och BankController. Detta minskade komplexiteten och gjorde varje fil mer fokuserad och lättare att underhålla. Nedan visas bilder som visar komplexiteten före och efter dessa förändringar.</p>
                <img src="{{ asset('img/problem2b.png') }}" alt="Komplexitet före förbättringarna för problem 2" width="300" />
                <img src="{{ asset('img/problem2a.png') }}" alt="Komplexitet efter förbättringarna för problem 2" width="300" />

                <p>För att lösa problem 3, där jag hade ett antal violations som behövde åtgärdas, fortsatte jag att reducera antalet violations. Även om jag fortfarande har kvar 2 violations, lyckades jag halvera antalet violations från tidigare. Jag kommer fortsätta att arbeta på att eliminera de återstående violations. Nedan visas bilder som visar antalet violations före och efter mina åtgärder.</p>
                <img src="{{ asset('img/problem3b.png') }}" alt="Antal violations före förbättringarna för problem 3" width="300" />
                <img src="{{ asset('img/problem3a.png') }}" alt="Antal violations efter förbättringarna för problem 3" width="300" />

            <h2>Diskussion</h2>
                <p>Genom att identifiera och lösa specifika problem relaterade till kodkvalitet har jag aktivt arbetat med att förbättra min kod och följa principerna för "clean code". Att skriva nya enhetstester, reducera komplexitet och hantera violations är alla strategier för att öka kodkvaliteten och göra koden mer läsbar, underhållbar och tillförlitlig.</p>

                <p>Det finns definitivt fördelar med att arbeta på detta sätt. Genom att fokusera på specifika problemområden kan man göra konkreta förbättringar och mäta framsteg över tid. Detta kan öka förtroendet för koden, minska risken för buggar och fel och göra det lättare att hantera och underhålla projektet.</p>

                <p>Samtidigt finns det också nackdelar med denna metod. Det kan vara tidskrävande att identifiera och åtgärda alla problem, särskilt i större projekt. Dessutom kan fokusering på specifika problem leda till att andra delar av koden förbises eller att överdriven optimering sker, vilket kan leda till ökad komplexitet eller förlorad funktionalitet.</p>

                <p>Det finns också andra sätt att jobba mot "clean code". Att följa etablerade kodningsstandarder och best practices, använda designmönster och principer som SOLID, samt att kontinuerligt granska och refaktorisera koden är alla viktiga strategier. Att ha en kultur av kodgranskning och kollegial feedback kan också vara mycket effektivt för att upprätthålla kodkvalitet och främja bästa praxis.</p>
        </div>
    </div>
</div>

{% endblock %}